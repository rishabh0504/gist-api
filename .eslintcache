[{"D:\\dubizzle\\github-ui\\src\\App.js":"1","D:\\dubizzle\\github-ui\\src\\api\\gist-api.js":"2","D:\\dubizzle\\github-ui\\src\\index.js":"3","D:\\dubizzle\\github-ui\\src\\config\\api_config.js":"4","D:\\dubizzle\\github-ui\\src\\components\\FileDetails.component.js":"5","D:\\dubizzle\\github-ui\\src\\reportWebVitals.js":"6","D:\\dubizzle\\github-ui\\src\\components\\OwnerDetails.compoent.js":"7","D:\\dubizzle\\github-ui\\src\\components\\Header.component.js":"8"},{"size":2128,"mtime":1608376419209,"results":"9","hashOfConfig":"10"},{"size":595,"mtime":1608370293977,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":1607809315609,"results":"12","hashOfConfig":"10"},{"size":54,"mtime":1608343786025,"results":"13","hashOfConfig":"10"},{"size":1539,"mtime":1608376938147,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1607809315609,"results":"15","hashOfConfig":"10"},{"size":1098,"mtime":1608376970820,"results":"16","hashOfConfig":"10"},{"size":806,"mtime":1608378552273,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"15u07cl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\dubizzle\\github-ui\\src\\App.js",["37"],"import { useEffect, useState } from 'react';\nimport { getGist } from './api/gist-api';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport FileDetails from './components/FileDetails.component';\nimport OwnerDetails from './components/OwnerDetails.compoent';\nimport Header from './components/Header.component';\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [gists, setGists] = useState([]);\n\n  useEffect(async () => {\n    if (!!username) {\n      const gistsDetail = await getGist(username);\n      setGists(gistsDetail);\n    }\n  }, [username]);\n\n  return (\n    <div>\n\n      {/* Header Part */}\n      <Header />\n      {/* Input container Part */}\n\n      <div className=\"container filter mt-4 mb-4\">\n        <div className=\"col-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search By Username...\"\n            value={username}\n            onChange={e => setUsername(e.target.value)} />\n        </div>\n      </div>\n\n\n      {\n        gists && (\n          gists.map((eachGist, index) => {\n            return (\n              <div className=\"container\" key={index}>\n                <div className=\"col-12 mt-3 mb-3\">\n                  <div className=\"card\">\n                    <div className=\"card-body d-flex\">\n                      <div className=\"col-6 ml-2 mr-2\">\n                        <div className=\"jumbotron\">\n                          <p>Gist Id : {eachGist.id}</p>\n                          <OwnerDetails id={eachGist.id} />\n                        </div>\n                      </div>\n                      <div className=\"col-6 ml-2 mr-2\">\n                        <FileDetails files={eachGist.files} id={eachGist.id} />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })\n        )\n      }\n      {\n        !gists.length > 0 && (\n          <div className=\"col-12\">\n            <h5 className=\"text-info text-center\">Nothing Found..!!!</h5>\n          </div>\n        )\n      }\n\n\n    </div>\n  );\n}\n\nexport default App;\n","D:\\dubizzle\\github-ui\\src\\api\\gist-api.js",["38"],"D:\\dubizzle\\github-ui\\src\\index.js",[],"D:\\dubizzle\\github-ui\\src\\config\\api_config.js",[],"D:\\dubizzle\\github-ui\\src\\components\\FileDetails.component.js",["39","40","41","42","43"],"import { useEffect, useState } from \"react\";\r\n\r\nfunction FileDetails(props) {\r\n    const [languages, setLanguages] = useState({});\r\n    const [id, setId] = useState('');\r\n    const [userCommit, setUserCommits] = useState([]);\r\n    useEffect(() => {\r\n        const foundLanguages = [];\r\n        const foundFilesMapping = {};\r\n        Object.keys(props.files).map((fileKey, index) => {\r\n            if (foundLanguages.includes(props.files[fileKey].language)) {\r\n                foundFilesMapping[props.files[fileKey].language].push(props.files[fileKey].filename)\r\n            } else {\r\n                foundLanguages.push(props.files[fileKey].language)\r\n                foundFilesMapping[props.files[fileKey].language] = [props.files[fileKey].filename]\r\n            }\r\n        })\r\n        setLanguages(foundFilesMapping);\r\n    }, [props.files]);\r\n    return (\r\n        <div className='col-12'>\r\n            <p className=\"text-success custom-sizing\">Modified files</p>\r\n            <ul className=\"list-group list-group-flush\">\r\n                {\r\n                    languages && (\r\n                        Object.keys(languages).map((keyItem, index) => {\r\n                            return (\r\n                                <li className=\"list-group-item custom-font\" key={index}><b className='language-name'>{keyItem} :</b> {languages[keyItem].join(', ')} </li>\r\n                            )\r\n                        })\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default FileDetails;\r\n","D:\\dubizzle\\github-ui\\src\\reportWebVitals.js",[],"D:\\dubizzle\\github-ui\\src\\components\\OwnerDetails.compoent.js",["44","45","46","47","48"],"import { useEffect, useState } from \"react\";\r\nimport { getGistForked } from './../api/gist-api';\r\nimport moment from 'moment'\r\n\r\n\r\nfunction OwnerDetails(props) {\r\n  const [id, setId] = useState('');\r\n  const [userCommit, setUserCommits] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    const forkedData = await getGistForked(props.id);\r\n    forkedData.sort((a, b) => {\r\n      return new Date(b.committed_at) - new Date(a.committed_at);\r\n    });\r\n    // Get 3 last commits\r\n    const lastCommits = forkedData.splice(0, 3);\r\n    setUserCommits(lastCommits);\r\n  }, [props.id])\r\n  return (\r\n    <div className='col-12'>\r\n      <ul className=\"list-group list-group-flush\">\r\n        {\r\n          userCommit && (\r\n            userCommit.map((commits, index) => {\r\n              return (\r\n                <li className=\"list-group-item custom-font\" key={index}><b>Modified By :</b>  <img src={commits.user.avatar_url} className='avatar ml-3 mr-3' /> <b>{commits.user.login}</b> </li>\r\n              )\r\n            })\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\nexport default OwnerDetails;\r\n","D:\\dubizzle\\github-ui\\src\\components\\Header.component.js",[],{"ruleId":"49","severity":1,"message":"50","line":13,"column":13,"nodeType":"51","endLine":18,"endColumn":4},{"ruleId":"52","severity":1,"message":"53","line":1,"column":8,"nodeType":"54","messageId":"55","endLine":1,"endColumn":13},{"ruleId":"52","severity":1,"message":"56","line":5,"column":12,"nodeType":"54","messageId":"55","endLine":5,"endColumn":14},{"ruleId":"52","severity":1,"message":"57","line":5,"column":16,"nodeType":"54","messageId":"55","endLine":5,"endColumn":21},{"ruleId":"52","severity":1,"message":"58","line":6,"column":12,"nodeType":"54","messageId":"55","endLine":6,"endColumn":22},{"ruleId":"52","severity":1,"message":"59","line":6,"column":24,"nodeType":"54","messageId":"55","endLine":6,"endColumn":38},{"ruleId":"60","severity":1,"message":"61","line":10,"column":55,"nodeType":"51","messageId":"62","endLine":10,"endColumn":57},{"ruleId":"52","severity":1,"message":"63","line":3,"column":8,"nodeType":"54","messageId":"55","endLine":3,"endColumn":14},{"ruleId":"52","severity":1,"message":"56","line":7,"column":10,"nodeType":"54","messageId":"55","endLine":7,"endColumn":12},{"ruleId":"52","severity":1,"message":"57","line":7,"column":14,"nodeType":"54","messageId":"55","endLine":7,"endColumn":19},{"ruleId":"49","severity":1,"message":"50","line":10,"column":13,"nodeType":"51","endLine":18,"endColumn":4},{"ruleId":"64","severity":1,"message":"65","line":26,"column":95,"nodeType":"66","endLine":26,"endColumn":161},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'userCommit' is assigned a value but never used.","'setUserCommits' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'moment' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]