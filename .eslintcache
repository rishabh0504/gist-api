[{"D:\\dubizzle\\github-ui\\src\\App.js":"1","D:\\dubizzle\\github-ui\\src\\api\\gist-api.js":"2","D:\\dubizzle\\github-ui\\src\\index.js":"3","D:\\dubizzle\\github-ui\\src\\config\\api_config.js":"4","D:\\dubizzle\\github-ui\\src\\components\\FileDetails.component.js":"5","D:\\dubizzle\\github-ui\\src\\reportWebVitals.js":"6","D:\\dubizzle\\github-ui\\src\\components\\OwnerDetails.compoent.js":"7","D:\\dubizzle\\github-ui\\src\\components\\Header.component.js":"8"},{"size":2017,"mtime":1608383054305,"results":"9","hashOfConfig":"10"},{"size":595,"mtime":1608370293977,"results":"11","hashOfConfig":"10"},{"size":500,"mtime":1607809315609,"results":"12","hashOfConfig":"10"},{"size":54,"mtime":1608343786025,"results":"13","hashOfConfig":"10"},{"size":1740,"mtime":1608389208425,"results":"14","hashOfConfig":"10"},{"size":362,"mtime":1607809315609,"results":"15","hashOfConfig":"10"},{"size":1272,"mtime":1608389111042,"results":"16","hashOfConfig":"10"},{"size":820,"mtime":1608379177091,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"15u07cl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\dubizzle\\github-ui\\src\\App.js",["36"],"import { useEffect, useState } from 'react';\nimport { getGist } from './api/gist-api';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport FileDetails from './components/FileDetails.component';\nimport OwnerDetails from './components/OwnerDetails.compoent';\nimport Header from './components/Header.component';\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [gists, setGists] = useState([]);\n\n  useEffect(async () => {\n    if (!!username) {\n      const gistsDetail = await getGist(username);\n      setGists(gistsDetail);\n    }\n  }, [username]);\n\n  return (\n    <div>\n\n      {/* Header Part */}\n      <Header />\n      {/* Input container Part */}\n\n      <div className=\"col-12 filter mt-4 mb-4 ml-3 mr-3\">\n        <div className=\"col-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search By Username...\"\n            value={username}\n            onChange={e => setUsername(e.target.value)} />\n        </div>\n      </div>\n\n      {\n        gists && (\n          gists.map((eachGist, index) => {\n            return (\n              <div className=\"col-12 main-container\" key={index}>\n                <div className=\"col-12 mt-3 mb-3\">\n                  <div className=\"card\">\n                    <div className=\"card-body d-flex\">\n                      <div className=\"col-4 ml-2 mr-2\">\n                        <OwnerDetails id={eachGist.id} />\n                      </div>\n                      <div className=\"col-8 ml-2 mr-2\">\n                        <FileDetails files={eachGist.files} id={eachGist.id} />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )\n          })\n        )\n      }\n\n      {\n        !gists.length > 0 && (\n          <div className=\"col-12 nothing-found\">\n            <h5 className=\"text-info text-center\">Nothing Found..!!!</h5>\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","D:\\dubizzle\\github-ui\\src\\api\\gist-api.js",["37"],"D:\\dubizzle\\github-ui\\src\\index.js",[],["38","39"],"D:\\dubizzle\\github-ui\\src\\config\\api_config.js",[],"D:\\dubizzle\\github-ui\\src\\components\\FileDetails.component.js",["40"],"D:\\dubizzle\\github-ui\\src\\reportWebVitals.js",[],"D:\\dubizzle\\github-ui\\src\\components\\OwnerDetails.compoent.js",["41","42"],"D:\\dubizzle\\github-ui\\src\\components\\Header.component.js",[],{"ruleId":"43","severity":1,"message":"44","line":13,"column":13,"nodeType":"45","endLine":18,"endColumn":4},{"ruleId":"46","severity":1,"message":"47","line":1,"column":8,"nodeType":"48","messageId":"49","endLine":1,"endColumn":13},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":8,"column":48,"nodeType":"45","messageId":"56","endLine":8,"endColumn":50},{"ruleId":"43","severity":1,"message":"44","line":7,"column":13,"nodeType":"45","endLine":15,"endColumn":4},{"ruleId":"57","severity":1,"message":"58","line":26,"column":21,"nodeType":"59","endLine":26,"endColumn":87},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-native-reassign",["60"],"no-negated-in-lhs",["61"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]